import numpy as np
import sys



'''
input_line= '2\t1\t2\t0\n'
print(input_line.rstrip('\n').split('\t'))
print(np.array(list(map(int, input_line.rstrip('\n').split('\t')))))
board[0]=np.array(list(map(int, input_line.rstrip('\n').split('\t'))))
print(board)

'''
'''
print(input_line.strip().split('\t'))
print(np.array(list(map(int, input_line.strip().split('\t')))))

values = np.array(list(map(int, input_line.strip().split('\t'))))

print(np.where(values==2, None, values))

#$ python takuzu.py < Exemplo1.txt



array = np.array([[1,2,3], [1,2,3], [1,1,9]])

_, row_counts = np.unique(array, axis=0, return_counts=True)
print(row_counts)



oi = np.array([(0,2),(3,4)])


b = np.array(list(zip((oi==0).sum(axis=0), (oi==0).sum(axis=1))))
print(b)

linha_01 = np.array([(self.board[row, :] == 0).sum(axis=1),(self.board[row, :] == 1).sum(axis=1)])
        coluna_01 = np.array([(self.board[:,col] == 0).sum(axis=0),(self.board[:,col] == 1).sum(axis=0)])

        if self.board_size % 2:
            menor_linhas = linha_01 < self.board_size//2
            menor_colunas = coluna_01 < self.board_size//2
            if np.all(menor_linhas) and np.all(menor_colunas):
                self.actions=np.array([])
            elif not menor_linhas[0]:
                np.delete(self.actions, where= self.actions[row,:,0])

board = Board.parse_instance_from_stdin()

problem = Takuzu(board)

s0 = TakuzuState(board)
print(s0.board)

s1 = problem.result(s0,(0,0,1))
print(s0.board)
print(s1.board)
s2 = problem.result(s1,(0,1,0))
print(s0.board)
print(s1.board)
print(s2.board)


a = np.array([[1,2,1],[1,4,0]])
print(a)
result = str(a.ravel())
#print(hash(result))

#result = np.where(a[0] == 1)


#print(result)

b = a.copy()

print(b is a)

b[0,0]=99

print(b, '=b')
print(a, '=a')



a=0
b=1
c=0
d=1
print((a==0 or b==0) and c==0)
'''
a = np.array([[1,2,1],[1,4,0]])
print(np.any(a == [1,1]))
